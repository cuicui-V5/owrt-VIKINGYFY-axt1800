#云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_CONFIG:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: true
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string
      # === 新增输入参数：自定义软件包源 ===
      WRT_CUSTOM_FEEDS:
        description: '自定义OpenWrt软件包源，每行一个。格式：src-git <name> <url>'
        required: false
        type: string
      # ==================================

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_SOURCE: ${{inputs.WRT_SOURCE}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}
  # === 新增环境变量：自定义软件包源 ===
  WRT_CUSTOM_FEEDS: ${{inputs.WRT_CUSTOM_FEEDS}}
  # ==================================

jobs:
  core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # 确保在执行系统级操作前，切换到安全的非root用户，如果不是已经在非root用户下
          # 或者使用sudo -E来执行需要root权限的命令
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix python3-netifaces libfuse-dev
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

          sudo mkdir -p /mnt/build_wrt
          sudo chown $USER:$USER /mnt/build_wrt
          sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Initialization Values
        run: |
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV
          echo "WRT_MARK=${GITHUB_REPOSITORY%%/*}" >> $GITHUB_ENV
          echo "WRT_INFO=${WRT_SOURCE%%/*}" >> $GITHUB_ENV
          # 这里的路径可能需要根据实际的.config文件位置调整
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./Config/$WRT_CONFIG.txt)" >> $GITHUB_ENV
          echo "WRT_KVER=none" >> $GITHUB_ENV
          echo "WRT_LIST=none" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

          # GitHub Action 移除国内下载源
          PROJECT_MIRRORS_FILE="./scripts/projectsmirrors.json"
          if [ -f "$PROJECT_MIRRORS_FILE" ]; then
            sed -i '/.cn\//d; /tencent/d; /aliyun/d' "$PROJECT_MIRRORS_FILE"
          fi

      - name: Check Scripts
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Caches
        id: check-cache
        if: env.WRT_TEST != 'true'
        uses: actions/cache@main
        with:
          key: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{env.WRT_HASH}}
          restore-keys: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: Update Caches
        if: env.WRT_TEST != 'true'
        run: |
          if [ -d "./wrt/staging_dir" ]; then
            find "./wrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
              find "$DIR" -type f -exec touch {} +
            done

            mkdir -p ./wrt/tmp && echo "1" > ./wrt/tmp/.build

            echo "toolchain skiped done!"
          else
            echo "caches missed!"
          fi

          if ${{steps.check-cache.outputs.cache-hit != 'true'}}; then
            CACHE_LIST=$(gh cache list --key "$WRT_CONFIG-$WRT_INFO" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
              gh cache delete $CACHE_KEY
            done

            echo "caches cleanup done!"
          fi

      # === 新增步骤：添加自定义软件包源到 feeds.conf.default ===
      - name: Add Custom Feeds
        if: env.WRT_CUSTOM_FEEDS != '' # 仅当 WRT_CUSTOM_FEEDS 非空时执行
        run: |
          cd ./wrt/
          echo "${{ env.WRT_CUSTOM_FEEDS }}" >> feeds.conf.default
          echo "Added custom feeds to feeds.conf.default"
      # =======================================================

      - name: Update Feeds # 更新所有默认 feeds，然后更新并安装自定义 feeds
        run: |
          cd ./wrt/

          echo "Updating all default feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # === 扩展原有步骤：更新并安装自定义 feeds ===
          if [ -n "${{ env.WRT_CUSTOM_FEEDS }}" ]; then
            echo "Updating and installing custom feeds..."
            # 逐行读取 WRT_CUSTOM_FEEDS，提取 feed 名称并执行 update/install
            echo "${{ env.WRT_CUSTOM_FEEDS }}" | while read -r line; do
              # 提取 src-git 或 src-svn 或 src-git-full 后的第一个单词作为 feed 名称
              feed_name=$(echo "$line" | awk '{print $2}')
              if [ -n "$feed_name" ]; then
                echo "Processing custom feed: $feed_name"
                ./scripts/feeds update "$feed_name"
                ./scripts/feeds install -a -f -p "$feed_name"
              else
                echo "Warning: Could not extract feed name from line: $line"
              fi
            done
            echo "Custom feeds update and install completed."
          fi
          # =============================================

      - name: Custom Packages # 运行自定义脚本来处理插件包
        run: |
          cd ./wrt/package/
          # 假设 $GITHUB_WORKSPACE/Scripts/Packages.sh 和 $GITHUB_WORKSPACE/Scripts/Handles.sh
          # 会读取 WRT_PACKAGE 环境变量并据此修改 .config 文件，启用/禁用相应的软件包。
          # 确保这些脚本能够正确处理 fancontrol feed 中提供的软件包名称。
          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings # 应用自定义设置和配置
        run: |
          cd ./wrt/

          # 确保 .config 文件存在，并加载基础配置
          # 如果 Config/$WRT_CONFIG.txt 是完整的 .config 文件，可以直接复制
          # 如果是部分配置，则追加到默认的 .config 中
          if [ ! -f .config ]; then
            # 尝试从 OpenWrt 源码的默认配置开始，如果 .config 不存在
            make defconfig # 这将生成一个基础 .config
          fi

          if [[ "${WRT_CONFIG,,}" == *"test"* ]]; then
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt >> .config
          else
            cat $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt $GITHUB_WORKSPACE/Config/GENERAL.txt >> .config
          fi

          # 运行自定义设置脚本
          $GITHUB_WORKSPACE/Scripts/Settings.sh

          # 重新生成 .config，确保所有配置（包括来自 feeds 和 WRT_PACKAGE 的）都生效
          # 这一步非常关键，它会根据当前 .config 的内容和所有已安装的 feeds 来更新配置
          make defconfig -j$(nproc)
          make clean -j$(nproc) # 清理编译产物，准备重新编译

      - name: Download Packages
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/
          make download -j$(nproc)

      - name: Compile Firmware
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/
          # 尝试编译，如果第一次失败，则尝试详细输出模式
          make -j$(nproc) || make -j$(nproc) V=s

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config-"$WRT_CONFIG"-"$WRT_INFO"-"$WRT_BRANCH"-"$WRT_DATE".txt

          if [[ $WRT_TEST != 'true' ]]; then
            echo "WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)" >> $GITHUB_ENV
            echo "WRT_LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | tr '\n' ' ')" >> $GITHUB_ENV

            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|sha256sums\|packages\)$" -exec rm -rf {} +

            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              NEW_FILE="$WRT_INFO"-"$WRT_BRANCH"-"$NAME"-"$WRT_DATE"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;

            make clean -j$(nproc)
          fi

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{env.WRT_CONFIG}}-${{env.WRT_INFO}}-${{env.WRT_BRANCH}}-${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！

            全系带开源硬件加速，别问了！

            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}
            提交：${{env.WRT_HASH}}

            配置：${{env.WRT_CONFIG}}
            平台：${{env.WRT_TARGET}}

            登录地址：${{env.WRT_IP}}
            登录密码：${{env.WRT_PW}}

            WIFI名称：${{env.WRT_SSID}}
            WIFI密码：${{env.WRT_WORD}}

            内核版本：${{env.WRT_KVER}}
            插件列表：${{env.WRT_LIST}}
